{"ast":null,"code":"import { SCENARIOS_LOADING_START, SCENARIOS_GET_SUCCESS, SCENARIOS_LOADING_ERROR } from '../types/scenarios.types';\nexport const getScenariosStart = () => ({\n  type: SCENARIOS_LOADING_START\n});\nexport const getScenariosSuccess = items => ({\n  type: SCENARIOS_GET_SUCCESS,\n  payload: items\n});\nexport const getScenariosError = err => ({\n  type: SCENARIOS_LOADING_ERROR,\n  payload: err\n});\nexport const getScenarios = userId => async dispatch => {\n  dispatch(getScenariosStart());\n\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/scenario/${userId}`);\n    const result = await response.json();\n    dispatch(getScenariosSuccess(result));\n  } catch (err) {\n    dispatch(getScenariosError(err));\n  }\n};","map":{"version":3,"sources":["/home/ruslan/final_project/smart_home/client/src/redux/actions/scenarios.action.js"],"names":["SCENARIOS_LOADING_START","SCENARIOS_GET_SUCCESS","SCENARIOS_LOADING_ERROR","getScenariosStart","type","getScenariosSuccess","items","payload","getScenariosError","err","getScenarios","userId","dispatch","response","fetch","process","env","REACT_APP_API_URL","result","json"],"mappings":"AAAA,SACEA,uBADF,EAEEC,qBAFF,EAGEC,uBAHF,QAIO,0BAJP;AAMA,OAAO,MAAMC,iBAAiB,GAAG,OAAO;AACtCC,EAAAA,IAAI,EAAEJ;AADgC,CAAP,CAA1B;AAGP,OAAO,MAAMK,mBAAmB,GAAIC,KAAD,KAAY;AAC7CF,EAAAA,IAAI,EAAEH,qBADuC;AAE7CM,EAAAA,OAAO,EAAED;AAFoC,CAAZ,CAA5B;AAIP,OAAO,MAAME,iBAAiB,GAAIC,GAAD,KAAU;AACzCL,EAAAA,IAAI,EAAEF,uBADmC;AAEzCK,EAAAA,OAAO,EAAEE;AAFgC,CAAV,CAA1B;AAKP,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAC1DA,EAAAA,QAAQ,CAACT,iBAAiB,EAAlB,CAAR;;AAEA,MAAI;AACF,UAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,aAAYN,MAAO,EAArD,CAA5B;AACA,UAAMO,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAT,EAArB;AACAP,IAAAA,QAAQ,CAACP,mBAAmB,CAACa,MAAD,CAApB,CAAR;AACD,GAJD,CAIE,OAAOT,GAAP,EAAY;AACZG,IAAAA,QAAQ,CAACJ,iBAAiB,CAACC,GAAD,CAAlB,CAAR;AACD;AACF,CAVM","sourcesContent":["import {\n  SCENARIOS_LOADING_START,\n  SCENARIOS_GET_SUCCESS,\n  SCENARIOS_LOADING_ERROR\n} from '../types/scenarios.types'\n\nexport const getScenariosStart = () => ({\n  type: SCENARIOS_LOADING_START,\n});\nexport const getScenariosSuccess = (items) => ({\n  type: SCENARIOS_GET_SUCCESS,\n  payload: items,\n});\nexport const getScenariosError = (err) => ({\n  type: SCENARIOS_LOADING_ERROR,\n  payload: err,\n});\n\nexport const getScenarios = (userId) => async (dispatch) => {\n  dispatch(getScenariosStart());\n\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/scenario/${userId}`);\n    const result = await response.json();\n    dispatch(getScenariosSuccess(result));\n  } catch (err) {\n    dispatch(getScenariosError(err));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}