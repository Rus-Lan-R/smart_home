{"ast":null,"code":"import { SET_DEVICES_IP } from \"../types/scanningIP.types\";\nimport * as apiRpiEndPoinst from \"../../config/apiRpiEndPoinst\";\nimport { enableLoader, disableLoader } from \"./loader.action\";\nexport const getIpDevices = () => async dispatch => {\n  try {\n    // dispatch(enableLoader());\n    const responseGetIp = fetch(apiRpiEndPoinst.getDevices());\n\n    if (responseGetIp.ok) {\n      const scanningIP = await responseGetIp.json();\n      console.log(\"responseGetIp.ok\");\n      dispatch(setDevicesIp(scanningIP));\n    }\n  } catch (error) {\n    alert(error);\n  } // dispatch(disableLoader());\n\n};\nexport const setDevicesIp = devicesIp => ({\n  type: SET_DEVICES_IP,\n  payload: devicesIp\n});","map":{"version":3,"sources":["/home/ruslan/final_project/smart_home/client/src/redux/actions/scanningIP.action.js"],"names":["SET_DEVICES_IP","apiRpiEndPoinst","enableLoader","disableLoader","getIpDevices","dispatch","responseGetIp","fetch","getDevices","ok","scanningIP","json","console","log","setDevicesIp","error","alert","devicesIp","type","payload"],"mappings":"AAAA,SAASA,cAAT,QAA+B,2BAA/B;AACA,OAAO,KAAKC,eAAZ,MAAiC,8BAAjC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,iBAA5C;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,MAAI;AACH;AACA,UAAMC,aAAa,GAAGC,KAAK,CAACN,eAAe,CAACO,UAAhB,EAAD,CAA3B;;AACA,QAAIF,aAAa,CAACG,EAAlB,EAAsB;AACrB,YAAMC,UAAU,GAAG,MAAMJ,aAAa,CAACK,IAAd,EAAzB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAR,MAAAA,QAAQ,CAACS,YAAY,CAACJ,UAAD,CAAb,CAAR;AACA;AACD,GARD,CAQE,OAAOK,KAAP,EAAc;AACfC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA,GAXoD,CAYrD;;AACA,CAbM;AAeP,OAAO,MAAMD,YAAY,GAAIG,SAAD,KAAgB;AAC3CC,EAAAA,IAAI,EAAElB,cADqC;AAE3CmB,EAAAA,OAAO,EAAEF;AAFkC,CAAhB,CAArB","sourcesContent":["import { SET_DEVICES_IP } from \"../types/scanningIP.types\";\nimport * as apiRpiEndPoinst from \"../../config/apiRpiEndPoinst\";\nimport { enableLoader, disableLoader } from \"./loader.action\";\n\nexport const getIpDevices = () => async (dispatch) => {\n\ttry {\n\t\t// dispatch(enableLoader());\n\t\tconst responseGetIp = fetch(apiRpiEndPoinst.getDevices());\n\t\tif (responseGetIp.ok) {\n\t\t\tconst scanningIP = await responseGetIp.json();\n\t\t\tconsole.log(\"responseGetIp.ok\");\n\t\t\tdispatch(setDevicesIp(scanningIP));\n\t\t}\n\t} catch (error) {\n\t\talert(error);\n\t}\n\t// dispatch(disableLoader());\n};\n\nexport const setDevicesIp = (devicesIp) => ({\n\ttype: SET_DEVICES_IP,\n\tpayload: devicesIp,\n});\n"]},"metadata":{},"sourceType":"module"}