function Pulse(online){
  return(
    <div>
      {online ? (<div id='pulse'><span class='pulse'></span></div>):(<div id='pulse'><span class='pulse-red'></span></div>)}
    </div>
  )
}

function ConnectionError(err){
  return (
    <div id='full-bg-wrapper'>
      <div class='middle-panel'>
        <label class='header-label'>No connection to server</label><br/>
        <label>Error: {err} - </label><label>Attempting to connect</label><br/>
        <div class='lds-ring'><div></div><div></div></div>
      </div>
    </div>
  )
}

function Loader(){
  return(
    <div class="lds-spinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
  )
}

class LogWindow extends React.Component{
  constructor(props){
    super(props)
    this.state = {
      logs:[],
      socket:{},
      arrowImg:'https://network-scanner-js-images.s3-ap-southeast-2.amazonaws.com/arrow.png'
    }
  }

  componentDidMount(){
    const host = this.props.host
    const socket = io('http://localhost:5000')
    this.setState({socket:socket})
    socket.emit('get-log', host)
    socket.on('get-log', (data)=>{
      var logs = this.state.logs
      logs.push(data.log.split('\n')[2])
      this.setState({logs:logs})
      var container = document.getElementById('log-wrapper')
      container.scrollTop = container.scrollHeight
    })

  }

  exit = () => {
    const socket = this.state.socket
    socket.emit('clear-log', 'stop')
    this.setState({logs:[]})
    this.props.exit()
  }

  render(){
    const logs = this.state.logs
    return(
      <div id='full-bg-wrapper'>
        <button onClick={this.exit} class='but-2'><img src={this.state.arrowImg} width={24}/></button>
        <div id='log-wrapper'>
          <label class='host-title'>{this.props.host.host}</label>
          <div class='displayed-logs'>
            {logs.map((log)=>{ return <div>{log}</div> })}
          </div>
        </div>
      </div>
    )
  }
}

class Window extends React.Component{
    constructor(props){
      super(props)
      this.state = {
        hosts:[],
        error:'',
        isError:false,
        hostLog:null
      }
    }

    componentDidMount(){
      const socket = io('http://localhost:5000')
      socket.on('ping-data', (data) => {
        this.setState({hosts:data})
      })
      socket.on('connect_error', (err) => {
        this.setState({error:err.message})
        this.setState({isError:true})
      })
      socket.on('connect', ()=>{this.setState({isError:false})})
    }

    loadingPage = _ => {
      return(
        <div style={{display:'flex', alignItems:'center'}}><Loader/><label style={{marginLeft:10, fontSize:20}}>Loading Data, please wait...</label></div>
      )
    }

    isEven = (index) => {
      if ((index+1)%2 === 0)
        return 'even'
      else
        return 'odd'
    }

    renderCluster = (hosts) => {
      const openLogImg = 'https://network-scanner-js-images.s3-ap-southeast-2.amazonaws.com/maximize.png'
      return (
        <div id='cluster-box'>
          {hosts.map((host)=>{
            let online = host.status == 'online' ? (true):(false)
            let response = host.res_avg
            let index = hosts.indexOf(host)
            if (host.res_avg === 'unknownms')
              response = 'unreachable'
            return(
              <div id='each-host' class={`device-${this.isEven(index)} ${host.status}`}>
                {Pulse(online)}
                <label>{host.host}</label>
                <label>Response: {response}</label>
                <label>Packet Loss: {host.packet_loss}%</label>
                <button class='open-log-but' onClick={()=>{this.setState({hostLog:host})}}><img src={openLogImg} width={24}/></button>
              </div>
            )
          })}
        </div>
      )
    }

    renderLabel = _ => {
      const npmLogo = 'https://network-scanner-js-images.s3-ap-southeast-2.amazonaws.com/npm-logo.png'
      return(
        <div id='footer'>
          <div style={{display:'flex', alignItems:'center'}}>
            <a href='https://www.npmjs.com/package/network-scanner-js' target='_blank'><label class='footer-label'>
              Powered by network-scanner-js
              <img src={npmLogo} width={48} style={{marginLeft:5,verticalAlign: 'middle'}}/>
            </label></a>
          </div>
        </div>
      )
    }

    render(){
      const hosts = this.state.hosts
      return(
        <div>
          <div id='content-wrapper'>
            <div id='content-header'>
              <label class='header-label'>Monitor Cluster</label>
              {this.renderLabel()}
            </div>
            {hosts.length === 0 ? (this.loadingPage()):(this.renderCluster(hosts))}
          </div>
          {this.state.isError ? (ConnectionError(this.state.error)):(null)}
          {this.state.hostLog ? (<LogWindow host={this.state.hostLog} exit={()=>{this.setState({hostLog:null})}}/>):(null)}
        </div>
      )
    }
}

ReactDOM.render(<Window/>, document.getElementById('root'))
