"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.speedTestFunc = exports.subnetData = exports.getRange = void 0;

var _fastSpeedtestApi = _interopRequireDefault(require("fast-speedtest-api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var getRange = function getRange(range) {
  if (range.includes('-') === false) throw new Error('Invalid IP Range, e.g(192.168.1.1-254)');
  if (!range) throw new Error('IP Range cannot be null, e.g(192.168.1.1-254)');
  var array = [];
  var network = range.split('-')[0];
  var max = range.split('-')[1];
  if (max > 255) throw new Error('Invalid IP Range, e.g(192.168.1.1-254)');
  var min = network.split('.')[3];
  network = network.replace(new RegExp(min + '$'), '');

  for (var i = Number(min); i <= Number(max); i++) {
    var node = network.concat(i);
    array.push(node);
  }

  return array;
};

exports.getRange = getRange;

var subnetData = function subnetData(data) {
  var addr = data.address;
  var obj = {
    subnet: addr.cidr_notation,
    subnet_bits: addr.subnet_bits,
    subnet_mask: addr.subnet_mask,
    network_address: addr.network_address,
    broadcast_address: addr.broadcast_address,
    first_host: addr.first_assignable_host,
    last_host: addr.last_assignable_host,
    available_hosts: addr.assignable_hosts,
    host_range: "".concat(addr.first_assignable_host, "-").concat(addr.last_assignable_host.split('.')[3])
  };
  return obj;
};

exports.subnetData = subnetData;

var speedTestFunc = function speedTestFunc(connections) {
  if (!connections) connections = 'multi';
  var speedtest = new _fastSpeedtestApi["default"]({
    token: 'YXNkZmFzZGxmbnNkYWZoYXNkZmhrYWxm',
    verbose: false,
    timeout: 10000,
    https: true,
    urlCount: connections == 'single' ? 1 : 5,
    bufferSize: 8,
    unit: _fastSpeedtestApi["default"].UNITS.Mbps
  });
  return speedtest.getSpeed().then(function (s) {
    return "".concat(Math.round(s * 100) / 100, "Mbps");
  })["catch"](function (e) {
    throw e;
  });
};

exports.speedTestFunc = speedTestFunc;