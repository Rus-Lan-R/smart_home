"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ipScanFunc = exports.clusterPingFunc = exports.pingFunc = void 0;

var _ping = _interopRequireDefault(require("ping"));

var _functions = require("./functions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var pingFunc = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(host, config) {
    var p, status;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!config) {
              config = {
                repeat: 1,
                size: 32,
                timeout: 1
              };
            }

            if (!config.repeat) {
              config.repeat = 1;
            }

            if (!config.size) {
              config.size = 32;
            }

            if (!config.timeout) {
              config.timeout = 1;
            }

            if (host) {
              _context.next = 6;
              break;
            }

            throw new Error('Host cannot be null');

          case 6:
            _context.prev = 6;
            _context.next = 9;
            return _ping["default"].promise.probe(host, {
              min_reply: config.repeat,
              packetSize: config.size,
              timeout: config.timeout
            });

          case 9:
            p = _context.sent;
            status = p.alive == true ? 'online' : 'offline';
            return _context.abrupt("return", {
              host: host,
              ip_address: p.numeric_host,
              status: status,
              res_avg: "".concat(p.avg, "ms"),
              times: p.times,
              packet_loss: p.packetLoss,
              log: p.output
            });

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](6);
            return _context.abrupt("return", new Error(_context.t0));

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[6, 14]]);
  }));

  return function pingFunc(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.pingFunc = pingFunc;

var clusterPingFunc = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(array, cb) {
    var new_arr;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            new_arr = [];
            _context3.next = 3;
            return Promise.all(array.map( /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(a) {
                var each_node;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return pingFunc(a);

                      case 3:
                        each_node = _context2.sent;
                        new_arr.push(each_node);
                        _context2.next = 10;
                        break;

                      case 7:
                        _context2.prev = 7;
                        _context2.t0 = _context2["catch"](0);
                        throw _context2.t0;

                      case 10:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, null, [[0, 7]]);
              }));

              return function (_x5) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 3:
            cb(new_arr);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function clusterPingFunc(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

exports.clusterPingFunc = clusterPingFunc;

var ipScanFunc = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(range, cb) {
    var arr;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            arr = (0, _functions.getRange)(range);
            _context5.next = 3;
            return Promise.all(arr.map( /*#__PURE__*/function () {
              var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(a) {
                var each_node;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.prev = 0;
                        _context4.next = 3;
                        return pingFunc(a);

                      case 3:
                        each_node = _context4.sent;
                        each_node.status === 'online' ? cb(each_node) : null;
                        _context4.next = 10;
                        break;

                      case 7:
                        _context4.prev = 7;
                        _context4.t0 = _context4["catch"](0);
                        throw _context4.t0;

                      case 10:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, null, [[0, 7]]);
              }));

              return function (_x8) {
                return _ref5.apply(this, arguments);
              };
            }()));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function ipScanFunc(_x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();

exports.ipScanFunc = ipScanFunc;