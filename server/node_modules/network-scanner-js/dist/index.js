"use strict";

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _getSslCertificate = _interopRequireDefault(require("get-ssl-certificate"));

var _extractDomain = _interopRequireDefault(require("extract-domain"));

var _webSocket = _interopRequireDefault(require("./web-socket.js"));

var _nodejsTraceroute = _interopRequireDefault(require("nodejs-traceroute"));

var _functions = require("./functions/functions");

var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));

var _web_server = require("./web_server");

var _dns = _interopRequireDefault(require("dns"));

var _pingFunctions = require("./functions/ping-functions");

var _sshFunction = require("./functions/ssh-function");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NetworkScanner = /*#__PURE__*/function () {
  function NetworkScanner() {
    _classCallCheck(this, NetworkScanner);

    this.commands = [], this._pollInterval = 10000;
  }

  _createClass(NetworkScanner, [{
    key: "sshCommands",
    get: function get() {
      return this.commands;
    },
    set: function set(commands) {
      if (!Array.isArray(commands)) {
        throw new Error("SSH commands must be an array not ".concat(_typeof(commands)));
      } else {
        this.commands = commands;
      }
    }
  }, {
    key: "pollInterval",
    set: function set(val) {
      if (isNaN(val)) {
        throw new Error("Poll interval must be an integer and not a ".concat(_typeof(val)));
      } else {
        this._pollInterval = val;
      }
    }
  }, {
    key: "poll",
    value: function () {
      var _poll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime["default"].mark(function _callee(host, config) {
        var p;
        return _regeneratorRuntime["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _pingFunctions.pingFunc)(host, config);

              case 2:
                p = _context.sent;
                return _context.abrupt("return", p);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function poll(_x, _x2) {
        return _poll.apply(this, arguments);
      }

      return poll;
    }()
  }, {
    key: "clusterPing",
    value: function clusterPing(array, cb) {
      (0, _pingFunctions.clusterPingFunc)(array, function (hosts) {
        cb(hosts);
      });
    }
  }, {
    key: "ipScan",
    value: function () {
      var _ipScan = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime["default"].mark(function _callee2(range, cb) {
        return _regeneratorRuntime["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _pingFunctions.ipScanFunc)(range, function (host) {
                  cb(host);
                });

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function ipScan(_x3, _x4) {
        return _ipScan.apply(this, arguments);
      }

      return ipScan;
    }()
  }, {
    key: "getSubnet",
    value: function getSubnet(subnet) {
      if (!subnet.split('/')[1]) {
        throw new Error("".concat(subnet, " is an invalid subnet"));
      }

      return (0, _nodeFetch["default"])("https://networkcalc.com/api/ip/".concat(subnet, "?binary=1")).then(function (res) {
        return res.json();
      }).then(function (data) {
        var obj = (0, _functions.subnetData)(data);
        return obj;
      });
    }
  }, {
    key: "macLookup",
    value: function () {
      var _macLookup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime["default"].mark(function _callee3(mac) {
        var res, data;
        return _regeneratorRuntime["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _nodeFetch["default"])("https://api.macvendors.com/".concat(mac));

              case 2:
                res = _context3.sent;
                _context3.next = 5;
                return res.text();

              case 5:
                data = _context3.sent;
                return _context3.abrupt("return", data);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function macLookup(_x5) {
        return _macLookup.apply(this, arguments);
      }

      return macLookup;
    }()
  }, {
    key: "getSsl",
    value: function () {
      var _getSsl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime["default"].mark(function _callee4(url) {
        var domain, ssl;
        return _regeneratorRuntime["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                domain = (0, _extractDomain["default"])(url);
                _context4.next = 3;
                return _getSslCertificate["default"].get(domain);

              case 3:
                ssl = _context4.sent;
                return _context4.abrupt("return", ssl);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function getSsl(_x6) {
        return _getSsl.apply(this, arguments);
      }

      return getSsl;
    }()
  }, {
    key: "netServer",
    value: function netServer(port) {
      var server = new _webSocket["default"].Server(port);
      return server.listen(port);
    }
  }, {
    key: "netClient",
    value: function netClient(host) {
      var client = new _webSocket["default"].Client(host);
      return client;
    }
  }, {
    key: "traceroute",
    value: function traceroute(dest, cb) {
      try {
        var tracer = new _nodejsTraceroute["default"]();
        tracer.on('hop', function (hop) {
          cb(hop);
        }).on('close', function (code) {
          return;
        });
        tracer.trace(dest);
      } catch (err) {
        throw err;
      }
    }
  }, {
    key: "monitorCluster",
    value: function monitorCluster(array) {
      var _this = this;

      this.netServer(5000).on('connection', function (socket) {
        var repeatPoll;

        _this.clusterPing(array, function (host) {
          socket.emit('ping-data', host);
        });

        repeatPoll = setInterval(function () {
          _this.clusterPing(array, function (host) {
            socket.emit('ping-data', host);
          });
        }, _this._pollInterval);
        var repeatLog;
        socket.on('get-log', function (node) {
          repeatLog = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime["default"].mark(function _callee5() {
            var poll;
            return _regeneratorRuntime["default"].wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return _this.poll(node.host);

                  case 2:
                    poll = _context5.sent;
                    socket.emit('get-log', poll);

                  case 4:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          })), 1000);
        });
        socket.on('clear-log', function (data) {
          clearInterval(repeatLog);
        });
        socket.on('disconnect', function () {
          clearInterval(repeatPoll);
          clearInterval(repeatLog);
        });
      });
      return (0, _web_server.webServer)();
    }
  }, {
    key: "lookup",
    value: function lookup(domain, cb) {
      return _dns["default"].lookup(domain, function (err, addresses, family) {
        if (err) throw err;
        cb(addresses);
      });
    }
  }, {
    key: "speedTest",
    value: function () {
      var _speedTest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime["default"].mark(function _callee6(connections) {
        var speed;
        return _regeneratorRuntime["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _functions.speedTestFunc)(connections);

              case 2:
                speed = _context6.sent;
                return _context6.abrupt("return", speed);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function speedTest(_x7) {
        return _speedTest.apply(this, arguments);
      }

      return speedTest;
    }()
  }, {
    key: "ssh",
    value: function ssh(sshDetails, cb) {
      var config = {
        host: sshDetails.host,
        port: sshDetails.port,
        user: sshDetails.user,
        password: sshDetails.password,
        commands: this.sshCommands
      };
      (0, _sshFunction.sshShell)(config, function (output) {
        cb(output);
      });
    }
  }]);

  return NetworkScanner;
}();

module.exports = NetworkScanner;