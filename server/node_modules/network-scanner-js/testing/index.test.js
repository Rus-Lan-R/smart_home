import regeneratorRuntime from 'regenerator-runtime'
import NetworkScanner from '../src'
const netScan = new NetworkScanner
import {getRange} from '../src/functions/functions'
import fetch from 'node-fetch'

test('Test polling function', async()=>{
  let poll = await netScan.poll('google.com')
  expect(poll.host).toBe('google.com')
})

test('Get addresses from mulitple ranges', ()=>{
  const arrays = [
    '10.168.1.7-9',
    '10.168.1.9-12',
    '10.168.1.99-101',
    '192.168.1.1-3'
  ]
  const outcomes = [
    ['10.168.1.7', '10.168.1.8', '10.168.1.9'],
    ['10.168.1.9', '10.168.1.10', '10.168.1.11', '10.168.1.12'],
    ['10.168.1.99', '10.168.1.100', '10.168.1.101'],
    ['192.168.1.1', '192.168.1.2', '192.168.1.3']
  ]
  arrays.map((arr) => {
    const range = getRange(arr)
    const i = arrays.indexOf(arr)
    expect(range).toStrictEqual(outcomes[i])
  })
})

let server
test('Test socket connection', ()=>{
  server = netScan.netServer(5001)
  server.on('connection', socket => {
    socket.on('test', (data) => {
      expect(data).toBe('testing from socket client')
    })
  })
  const client = netScan.netClient('http://localhost:5001')
  client.emit('test', 'testing from socket client')
  client.disconnect()
  server.close()
})

test('DNS lookup', ()=>{
  netScan.lookup('w3schools.com', (address)=>{
    expect(address).toBe('66.29.212.110')
  })
})

let webServer
test('loading web browser', async() => {
  webServer = await netScan.monitorCluster(['google.com', 'youtube.com'])
  let call = await fetch('http://localhost:8080')
  expect(call.status).toBe(200)
})

test('Testing SSH client', ()=>{
  netScan.sshCommands = ['hostname']
  const config = { host:'test.rebex.net', port:22, user:'demo', password:'password' }
  netScan.ssh(config, (output)=>{
    expect(output).toBe('ETNA')
  })
})

afterAll(done => {
  webServer.close()
  server.close()
  done()
})
